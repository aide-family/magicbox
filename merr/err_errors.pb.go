// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package merr

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_BAD_REQUEST.String() && e.Code == 400
}

func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_NOT_FOUND.String() && e.Code == 400
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_CAPTCHA.String() && e.Code == 400
}

func ErrorCaptcha(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_CAPTCHA.String(), fmt.Sprintf(format, args...))
}

func IsParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_PARAMS.String() && e.Code == 400
}

func ErrorParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_PARAMS.String(), fmt.Sprintf(format, args...))
}

func IsPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_PASSWORD.String() && e.Code == 400
}

func ErrorPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_PASSWORD.String(), fmt.Sprintf(format, args...))
}

func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_PERMISSION_DENIED.String() && e.Code == 400
}

func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_METHOD_NOT_ALLOWED.String() && e.Code == 400
}

func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_EXIST.String() && e.Code == 400
}

func ErrorExist(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsResourceNotOpen(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_RESOURCE_NOT_OPEN.String() && e.Code == 400
}

func ErrorResourceNotOpen(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_RESOURCE_NOT_OPEN.String(), fmt.Sprintf(format, args...))
}

func IsRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_REQUIRED.String() && e.Code == 400
}

func ErrorRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_REQUIRED.String(), fmt.Sprintf(format, args...))
}

func IsConflict(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ClientError_CONFLICT.String() && e.Code == 400
}

func ErrorConflict(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ClientError_CONFLICT.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UnauthorizedError_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_INVALID_TOKEN.String() && e.Code == 401
}

func ErrorInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UnauthorizedError_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

func IsTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_TOKEN_EXPIRED.String() && e.Code == 401
}

func ErrorTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UnauthorizedError_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

func IsUserForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_USER_FORBIDDEN.String() && e.Code == 401
}

func ErrorUserForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UnauthorizedError_USER_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UnauthorizedError_USER_NOT_FOUND.String() && e.Code == 401
}

func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UnauthorizedError_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsInternalServer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerError_INTERNAL_SERVER.String() && e.Code == 500
}

func ErrorInternalServer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ServerError_INTERNAL_SERVER.String(), fmt.Sprintf(format, args...))
}

func IsInvalidArgument(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ServerError_INVALID_ARGUMENT.String() && e.Code == 500
}

func ErrorInvalidArgument(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ServerError_INVALID_ARGUMENT.String(), fmt.Sprintf(format, args...))
}
